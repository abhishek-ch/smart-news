//import org.apache.spark.{SparkContext, SparkConf}
//import org.apache.hadoop.conf.Configuration
//
//import org.apache.spark.rdd.RDD
//
//import org.bson.BSONObject
//import org.bson.BasicBSONObject
//import com.mongodb.hadoop.{
//MongoInputFormat, MongoOutputFormat,
//BSONFileInputFormat, BSONFileOutputFormat}
//
///**
//  * Created by abc on 23/01/2016.
//  */
//object Test {
//  def main(args: Array[String]) {
//    val logFile = "file:///Volumes/work/data/db/test/dataset.json"
//    val conf = new SparkConf().setAppName("Simple Application")
//    val sc = new SparkContext(conf)
//    val logData = sc.textFile(logFile, 2).cache()
//    val numAs = logData.filter(line => line.contains("a")).count()
//    val numBs = logData.filter(line => line.contains("b")).count()
//    println("Lines with a: %s, Lines with b: %s".format(numAs, numBs))
//
//    val mongoConfig = new Configuration()
//    mongoConfig.set("mongo.input.uri",
//      "mongodb://localhost:27017/news.newswebdump")
//    mongoConfig.set("mongo.output.uri", "mongodb://127.0.0.1:27017/news.output")
//
//    // Create an RDD backed by the MongoDB collection.
//    val mongoRDD = sc.newAPIHadoopRDD(
//      mongoConfig,                // Configuration
//      classOf[MongoInputFormat],  // InputFormat
//      classOf[Object],            // Key type
//      classOf[BSONObject])        // Value type
//
//
//
//
////    db.libraries.find
//    val countsRDD = mongoRDD.flatMap(arg => {
//      var str = arg._2.get("data").toString
//      str = str.toLowerCase().replaceAll("[.,!?\n]", " ")
//      str.split(" ")
//    })
//      .map(word => (word, 1))
//      .reduceByKey((a, b) => a + b)
//
//    // Create a separate Configuration for saving data back to MongoDB.
//    val outputConfig = new Configuration()
//    outputConfig.set("mongo.output.uri",
//      "mongodb://localhost:27017/output.collection")
//
//
//    // Output contains tuples of (null, BSONObject) - ObjectId will be generated by Mongo driver if null
//    val saveRDD = countsRDD.map((arg) => {
//      var bson = new BasicBSONObject()
//      val count: AnyRef = Int.box(arg._2)
//      bson.put("word", arg._1)
//      bson.put("count", count)
//      (null, bson)
//    })
//
//    // Only MongoOutputFormat and config are relevant
//    saveRDD.saveAsNewAPIHadoopFile("file:///bogus", classOf[Any], classOf[Any], classOf[com.mongodb.hadoop.MongoOutputFormat[Any, Any]], mongoConfig)
//
//
//
//  }
//
//
//
//
//}
